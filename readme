
polar-bear项目定位为自动化测试框架 ，代码是基于openstack nova项目来进行二次开发的。

框架结构：
        第一部分：
	nova-api作为对外的入口，接受各种平台发起的restful api 的请求。
	
	第二部分：负责业务调度、日志收集、业务分发（任务顺序或则并发）
	nova-condutor 和nova-schedule 合并组成
	
	第三部分：测试实现层 
	由nova-compute修改而来，以插件理念来编写实现层代码。 目前简单了实现了docker 和 http 插件（稍后介绍由这2个插件来实现一个testplan）
	
    
    
安装准备：
	1.所有的安装是基于centos系统（最好没有安装过python其它库的，有可能产生冲突。系统最好也是centos，原则上其它系统也可以，出问题自己调整下）
	2.python 使用python2.7
	3.mysql数据库
    
安装步骤：

下载代码： 

	git clone https://github.com/KevinKaiQian/polar-bear.git

安装rabbitmq 组件

	yum install centos-release-openstack-queens -y

	yum install rabbitmq-server -y

	systemctl enable rabbitmq-server.service && systemctl start rabbitmq-server.service

	rabbitmqctl add_user openstack Newsys@1234 && rabbitmqctl set_user_tags openstack  administrator && rabbitmqctl set_permissions openstack ".*" ".*" ".*"

	rabbitmq-plugins enable rabbitmq_management && systemctl restart rabbitmq-server.service

	systemctl disable firewalld && systemctl stop firewalld


安装 MySQL 数据库 Python 标准数据库接口

     yum install MySQL-python -y

安装 python 第三方库 ：

     easy_install pip

     pip install -r requirements.txt


修改配置文件：

	配置文件 polar-bear/nova/cmd/nova.ini .

	[DEFAULT]
	debug = true
	verbose = true
	#log_file =/root/api/nova/nova.log
	log_dir = /root/test/polar-bear/nova(log目录)
	fping_path=/usr/sbin/fping
	compute_plugin=nova.compute.manager_linux_system.ComputeManager_linux_system（这里面配置了两个插件）
	osapi_compute_workers=1
	my_ip=192.168.1.181（主机地址）
	host=192.168.1.181（主机地址）
	enabled_apis=osapi_compute
	rpc_backend=rabbit
	compute_driver=libvirt.LibvirtDriver
	default_publisher_id=192.168.1.181（主机地址）
	scheduler_max_attempts=3
	[database]
	connection=mysql+pymysql://root:t-span@192.168.1.99/nova（数据库配置）
	[oslo_messaging_amqp]
	[oslo_messaging_notifications]
	driver=messagingv2
	[oslo_messaging_rabbit]
	kombu_ssl_keyfile=
	kombu_ssl_certfile=
	kombu_ssl_ca_certs=
	rabbit_host=192.168.1.181（rabbitmq 地址。）
	rabbit_port=5672
	rabbit_use_ssl=False
	rabbit_userid=openstack
	rabbit_password=Newsys@1234

	[oslo_messaging_zmq]
	[oslo_middleware]
	[conductor]
	workers=1

	#[formatters]

创建数据库nova：

	mysql必须自己安装,需要手动创建创建一个nova的database。
	
创建数据库表：

	cd polar-bear/nova/cmd 执行命令python manage.py（在nova database 创建表）


使用方法：

启动服务：

	启动api服务：cd polar-bear/nova/cmd 执行命令python api.py
	启动controller服务：cd polar-bear/nova/cmd 执行命令python controller.py
	启动compute服务：cd polar-bear/nova/cmd 执行命令python compute.py


查询所有的slave节概况：
	
curl -s http://168.138.209.49:8774/v2.1/slaves| python -m json.tool


	{
	    "f6bc1be1-0654-4c89-b823-36376da509d5": {
		"host": "10.0.0.22",
		"id": 1
	    }
	}
	
查询所有的slave节点具体的信息：

	curl -s http://168.138.209.49:8774/v2.1/slaves/detail | python -m json.tool

	{
	    "f6bc1be1-0654-4c89-b823-36376da509d5": {
		"compute_node_method": {
		    "docker": {
			"parameters": {
			    "action": "docker action method",
			    "image": "docker image name"
			},
			"start_container": "operate on the container"
		    },
		    "http": {
			"get": "Http Get method interface",
			"parameters": {
			    "url": "http request url ,default is none"
			},
			"post": "Http post method interface"
		    }
		},
		"compute_node_type": "docker,http",
		"host": "10.0.0.22",
		"id": 1
	    }
	}
	
	上面是一个测试station，同时具备http 和docker 插件提供的功能
	

执行testplan：

        这个测试用例实现了一个简单的http app 。编译成容器image交给测试框架来测试http app 提供的功能。test.json 是测试用例（文件再代码根目录）
	
	curl -s http://168.138.209.49:8774/v2.1/testplan -X POST -H "Content-Type:application/json" -d @test.json | python -m json.tool



执行用例会得到一个TestPlan ID。后续用这个ID 来查询测试结果。

	{
		"TestPlan": 24
	}


查询测试结果：

curl -s http://168.138.209.49:8774/v2.1/testplan/40 | python -m json.tool 

{
    "TestCase : 1": {
        "TestStep : 1": {
            "input": {
                "host": "10.0.0.22",
                "method": "start_container",
                "parameters": {
                    "api_version": "auto",
                    "auth_email": "None",
                    "cap_add": [],
                    "command": "/bin/bash -c 'cd /root/http/ && python manage.py 9000'",
                    "detach": "True",
                    "environment": {
                        "demo": "this is demo"
                    },
                    "graceful_timeout": 10,
                    "image": "http",
                    "labels": {},
                    "name": "centos",
                    "privileged": "True",
                    "remove_on_exit": "True",
                    "restart_policy": "unless-stopped",
                    "restart_retries": 10,
                    "security_opt": [],
                    "state": "running",
                    "tty": "True",
                    "volumes": [
                        "/dev/:/dev/"
                    ],
                    "volumes_from": "None"
                },
                "plugin": "docker"
            },
            "output": {
                "log": "start container successfully",
                "result": "PASS"
            }
        },
        "TestStep : 2": {
            "input": {
                "host": "10.0.0.22",
                "method": "docker_command",
                "parameters": {
                    "command": "/bin/bash -c 'ps -ef | grep python'",
                    "name": "centos"
                },
                "plugin": "docker"
            },
            "output": {
                "log": "root         1     0  0 08:11 pts/4    00:00:00 /bin/bash -c cd /root/http/ && python manage.py 9000",
                "result": "PASS"
            }
        },
        "TestStep : 3": {
            "input": {
                "host": "10.0.0.22",
                "method": "get",
                "parameters": {
                    "url": "http://0.0.0.0:9000/v1/"
                },
                "plugin": "http"
            },
            "output": {
                "log": "{\"summary\": \"this is plus demo\"}",
                "result": "PASS"
            }
        },
        "TestStep : 4": {
            "input": {
                "host": "10.0.0.22",
                "method": "post",
                "parameters": {
                    "data": {
                        "value1": "20",
                        "value2": "30"
                    },
                    "url": "http://0.0.0.0:9000/v1/add"
                },
                "plugin": "http"
            },
            "output": {
                "log": "{\"result\": true, \"value\": 50}",
                "result": "PASS"
            }
        },
        "TestStep : 5": {
            "input": {
                "host": "10.0.0.22",
                "method": "post",
                "parameters": {
                    "data": {
                        "value1": "211",
                        "value2": "130"
                    },
                    "url": "http://0.0.0.0:9000/v1/add"
                },
                "plugin": "http"
            },
            "output": {
                "log": "{\"result\": true, \"value\": 341}",
                "result": "PASS"
            }
        },
        "TestStep : 6": {
            "input": {
                "host": "10.0.0.22",
                "method": "post",
                "parameters": {
                    "data": {
                        "value1": "50",
                        "value2": "890"
                    },
                    "url": "http://0.0.0.0:9000/v1/add"
                },
                "plugin": "http"
            },
            "output": {
                "log": "{\"result\": true, \"value\": 940}",
                "result": "PASS"
            }
        },
        "TestStep : 7": {
            "input": {
                "host": "10.0.0.22",
                "method": "remove_container",
                "parameters": {
                    "api_version": "auto",
                    "auth_email": "None",
                    "cap_add": [],
                    "command": "/bin/bash -c 'cd /root/http/ && python manage.py 9000'",
                    "detach": "True",
                    "environment": {
                        "demo": "this is demo"
                    },
                    "graceful_timeout": 10,
                    "image": "http",
                    "labels": {},
                    "name": "centos",
                    "privileged": "True",
                    "remove_on_exit": "True",
                    "restart_policy": "unless-stopped",
                    "restart_retries": 10,
                    "security_opt": [],
                    "state": "running",
                    "stepid": "1",
                    "tty": "True",
                    "volumes": [
                        "/dev/:/dev/"
                    ],
                    "volumes_from": "None"
                },
                "plugin": "docker"
            },
            "output": {
                "log": "start container successfully",
                "result": "PASS"
            }
        }
    }
}

插件代码：


	class ComputeManager_http(base.Base):

	    target = messaging.Target(namespace='http', version='4.0')

	    def __init__(self):
		super(ComputeManager_http, self).__init__()
		self.compute_rpcapi = compute_rpcapi.ComputeAPI()
		self.servicegroup_api = servicegroup.API()
		self.compute_task_api = conductor.ComputeTaskAPI()


	    def reset(self):
		LOG.info(_LI('Reloading compute RPC API'))
		compute_rpcapi.LAST_VERSION = None
		self.compute_rpcapi = compute_rpcapi.ComputeAPI()

	    @compute_utils.mark_describe_task(namespace='http',
					      describe="Http Get method interface",
					      parameters={'url':"http request url ,default is none"})
	    def get(self, context, parameters,topic):
		LOG.info(_LI("http request: %s"),
			 json.dumps(parameters))
		out,status,method = '','FAIL','get'
		url = parameters.get('url', None)
		stepid = parameters.get('stepid', None)
		try:
		    response = requests.get(url=url)
		    if response.status_code == 200:
			status = "PASS"
		    else:
			status = "FAIL"
		    out = response.text
		    LOG.info("xx"+str(url))
		    rpclient.RPCClient(topic=topic).result(ctxt=context, method=method, out=out, status=status, stepid=stepid)
		except BaseException as e:
		    status = "FAIL"
		    out=str(e.message)
		    LOG.info(_LI("http get fail reason: %s"),
			     e.message)
		    rpclient.RPCClient(topic=topic).result(ctxt=context, method=method, out=out, status=status, stepid=stepid)


