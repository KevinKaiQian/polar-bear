

这个项目是基于openstack框架重构的测试框架。保留了api conductor 和 compute 模块。

目标：
	以api模块为对外交互通道。controller整合了conductor和schedule,负责所有逻辑和模板解析。
	compute 模块抽象成测试设备，抽象的方式是以plugin的形式完成的。比如抽象成编译插件 部署插件 测试用例插件 。一个compute可以同时拥有其中一个或者多个插件。
    
架构概况：
	用户发送消息到 api, api初步处理数据然后发送给controller。
	controller 负责模板的解析,compute节点的调度, 日志的收集。
	compute 就是实现层,执行测试步骤。
	大致概况参考图片：overview.png

    
安装准备：
	1.所有的安装是基于centos系统（最好没有安装过python其它库的，有可能产生冲突。系统最好也是centos，原则上其它系统也可以，出问题自己调整下）
	2.python 使用python2.7。 我没有使用six 模块来兼容python3
	3.准备一个数据库
    
安装步骤：

下载代码： 

	git clone https://github.com/KevinKaiQian/polar-bear.git

安装rabbitmq 组件

	yum install centos-release-openstack-queens -y

	yum install rabbitmq-server -y

	systemctl enable rabbitmq-server.service && systemctl start rabbitmq-server.service

	rabbitmqctl add_user openstack Newsys@1234 && rabbitmqctl set_user_tags openstack  administrator && rabbitmqctl set_permissions openstack ".*" ".*" ".*"

	rabbitmq-plugins enable rabbitmq_management && systemctl restart rabbitmq-server.service

	systemctl disable firewalld && systemctl stop firewalld


安装 MySQL 数据库 Python 标准数据库接口

     yum install MySQL-python -y

安装 python 第三方库 ：

     easy_install pip

     pip install -r requirements.txt

     requirements.txt在项目根目录


修改配置文件：

	配置文件 polar-bear/nova/cmd/nova.ini .

	[DEFAULT]
	debug = true
	verbose = true
	#log_file =/root/api/nova/nova.log
	log_dir = /root/test/polar-bear/nova(log目录)
	fping_path=/usr/sbin/fping
	compute_plugin=nova.compute.manager_linux_system.ComputeManager_linux_system（这里面配置了两个插件）
	osapi_compute_workers=1
	my_ip=192.168.1.181（主机地址）
	host=192.168.1.181（主机地址）
	enabled_apis=osapi_compute
	rpc_backend=rabbit
	compute_driver=libvirt.LibvirtDriver
	default_publisher_id=192.168.1.181（主机地址）
	scheduler_max_attempts=3
	[database]
	connection=mysql+pymysql://root:t-span@192.168.1.99/nova（数据库配置）
	[oslo_messaging_amqp]
	[oslo_messaging_notifications]
	driver=messagingv2
	[oslo_messaging_rabbit]
	kombu_ssl_keyfile=
	kombu_ssl_certfile=
	kombu_ssl_ca_certs=
	rabbit_host=192.168.1.181（rabbitmq 地址。）
	rabbit_port=5672
	rabbit_use_ssl=False
	rabbit_userid=openstack
	rabbit_password=Newsys@1234

	[oslo_messaging_zmq]
	[oslo_middleware]
	[conductor]
	workers=1

	#[formatters]

创建数据库nova：

	mysql必须自己安装,在mysql里面创建一个名字为nova的database。

创建数据库表：

	cd polar-bear/nova/cmd 执行命令python manage.py（在nova database 创建表）




使用方法：

启动服务：

	启动api服务：cd polar-bear/nova/cmd 执行命令python api.py
	启动controller服务：cd polar-bear/nova/cmd 执行命令python controller.py
	启动compute服务：cd polar-bear/nova/cmd 执行命令python compute.py


查询所有的slave节概况：
	
	curl -s http://192.168.1.181:8774/v2.1/slaves| python -m json.tool


		{
			"850c5dc5-a007-47f6-a513-1924576e6050": {
				"host": "192.168.1.181",
				"id": 1
			}
		}
	
查询所有的slave节点具体的信息：

	curl -s http://192.168.1.181:8774/v2.1/slaves/detail | python -m json.tool

		{
			"850c5dc5-a007-47f6-a513-1924576e6050": {
				"compute_node_method": {
					"build_server": {
						"ping": "parameters is dict. address is target address count is count of ping . interval is time of two packet"
					},
					"linux_system": {
						"ping": "parameters is dict. address is target address count is count of ping . interval is time of two packet",
						"run_shell": "parameters is dict. cmd is command line. args is parameter"
					}
				},
				"compute_node_type": "linux_system,build_server",
				"host": "192.168.1.181",
				"id": 1
			}
		}

查询单个slave节点具体的信息：

	curl -s http://192.168.1.181:8774/v2.1/slaves/1 | python -m json.tool

		{
			"compute_node_method": {
				"build_server": {
					"ping": "parameters is dict. address is target address count is count of ping . interval is time of two packet"
				},
				"linux_system": {
					"ping": "parameters is dict. address is target address count is count of ping . interval is time of two packet",
					"run_shell": "parameters is dict. cmd is command line. args is parameter"
				}
			},
			"compute_node_type": "linux_system,build_server",
			"host": "192.168.1.181",
			"id": 1,
			"uuid": "850c5dc5-a007-47f6-a513-1924576e6050"
		}

执行testplan：

	curl -s http://135.251.149.80:8774/v2.1/testplan -X POST -H "Content-Type:application/json" -d @testplan.json | python -m json.tool


	testplan.json 在项目根目录里面。需要根据你实际情况修改json 文件里面STA1和STA2 地址（STA1是计算节点的地址，STA2也可以是不存在的地址。TestPlan测试的是从STA1 ping 通 STA2）

同时你会得到一个TestPlan ID。可以用这个ID 来查询测试结果。

	{
		"TestPlan": 24
	}

查询测试结果：

	curl -s http://135.251.149.80:8774/v2.1/testplan/24 | python -m json.tool

		{
			"1": {
				"Parallel-Step-1": "PASS"
			},
			"2": {
				"Serial-Step-1": "PASS",
				"Serial-Step-2": "PASS"
			}
		}

插件编写：

	重新变写插件，首先需要在nova.ini里面配置 compute_plugin=nova.compute.manager_linux_system.ComputeManager_linux_system,nova.compute.aaaaaa.bbbbbbb。两个插件间用逗号分隔。

	nova.compute.manager_linux_system.ComputeManager_linux_system 这个插件对应文件是polar-bear/nova/compute/manager_linux_system

	ComputeManager_linux_system是文件里面的一个类。具体看下面代码

	具体方法前面必须加个装饰器 compute_utils.mark_describe_task 用来标记

	具体方法结束以前必须上报消息给conductor :  rpclient.RPCClient(topic=topic).result(ctxt=context, result=result) 

	class ComputeManager_linux_system(base.Base):

		target = messaging.Target(namespace='linux_system', version='4.0')
		
		def __init__(self):
			super(ComputeManager_linux_system, self).__init__()
			self.compute_rpcapi = compute_rpcapi.ComputeAPI()
			self.servicegroup_api = servicegroup.API()
			self.compute_task_api = conductor.ComputeTaskAPI()
			

		def reset(self):
			LOG.info(_LI('Reloading compute RPC API'))
			compute_rpcapi.LAST_VERSION = None
			self.compute_rpcapi = compute_rpcapi.ComputeAPI()

		@compute_utils.mark_describe_task(namespace='linux_system',
										  describe="parameters is dict. address is target address ,count is count of ping . interval is time of two packet")
		def ping(self, context, parameters,topic):

			address=parameters.get('address',None)
			count= "-c "+str(parameters.get('count',4))
			interval="-i "+str( parameters.get('interval',1))
			err=-1
			if address == None:
				result={
					"out":"has not cmd parameters, can not run",
					"status": "FAIL",
					"method":"ping"
				}       
				if topic:
					rpclient.RPCClient(topic=topic).result(ctxt=context, result=result) 
			else:
				ca_dir="/root"
				try:
					out, err =utils.execute('ping', address,count ,interval, cwd=ca_dir,run_as_root=True)
				except Exception as e:
					out=e.message
				if err == '':res= "PASS"
				else:res = "FAIL"

				result={
					"out":out,
					"status": res,
					"method":"ping"
				}
				if topic:
					rpclient.RPCClient(topic=topic).result(ctxt=context, result=result)        
			
		@compute_utils.mark_describe_task(namespace='linux_system',
										  describe="parameters is dict. cmd is command line. args is parameter")
		def run_shell(self, context, parameters,topic):
			cmd= parameters.get('cmd',None)
			arg= parameters.get('args',None)

			if cmd == None:
				result={
					"out":"has not cmd parameters, can not run",
					"status": "FAIL",
					"method":"run_shell"
				}       
				if topic:
					rpclient.RPCClient(topic=topic).result(ctxt=context, result=result) 
			else:
				ca_dir="/root"
				if arg == None:arg=""
				out, err =utils.execute(cmd, arg , cwd=ca_dir,run_as_root=True)
				print "xxxx"+str(err)
				if err == '':res= "PASS"
				else:res = "FAIL"
				result={
					"out":out,
					"status": res,
					"method":"run_shell"
				}
				if topic:
					rpclient.RPCClient(topic=topic).result(ctxt=context, result=result)


